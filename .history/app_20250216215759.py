import streamlit as st
from PIL import Image
import datetime
import json
import os
import numpy as np
from dotenv import load_dotenv
import plotly.express as px
import pandas as pd
import streamlit as st
from langchain.embeddings import HuggingFaceEmbeddings

st.write("Langchain imported successfully!" if "langchain" in sys.modules else "Langchain NOT imported.")
st.write("HuggingFaceEmbeddings imported successfully!" if "langchain.embeddings" in sys.modules else "HuggingFaceEmbeddings NOT imported.")

# V√©rification des modules critiques
try:
    from langchain_community.embeddings import HuggingFaceEmbeddings
except ModuleNotFoundError:
    st.error("Le module `langchain` ou `HuggingFaceEmbeddings` n'est pas install√©.")
    st.stop()

try:
    from transformers import pipeline
except ModuleNotFoundError:
    st.error("Le module `transformers` n'est pas install√©.")
    st.stop()

try:
    import faiss
except ModuleNotFoundError:
    st.error("Le module `faiss-cpu` n'est pas install√©.")
    st.stop()

# Chargement des variables d'environnement
load_dotenv()

# D√©finition du r√©pertoire de base
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# Configuration de la page
st.set_page_config(page_title="GeoSearch", page_icon="üåç", layout="wide")

# Chemins des fichiers
IMG_PATH = os.path.join(BASE_DIR, "IM3.png")
IMG_ACCUEIL_PATH = os.path.join(BASE_DIR, "Img.png")
FAISS_INDEX_PATH = os.path.join(BASE_DIR, "faiss_index.bin")
METADATA_FILE = os.path.join(BASE_DIR, "metadata_faiss.json")

MAP_PATHS = {
    "Carte interactive du monde": os.path.join(BASE_DIR, "fixed_interactive_world_map.html"),
    "Cartographie de l'occupation des sols": os.path.join(BASE_DIR, "modis-viewer.html"),
    "Exploration de fond de carte": os.path.join(BASE_DIR, "map_layer_fix.html")
}

# V√©rification de l'existence de FAISS
def verify_faiss_index():
    if os.path.exists(FAISS_INDEX_PATH):
        try:
            index = faiss.read_index(FAISS_INDEX_PATH)
            return index
        except Exception as e:
            st.sidebar.error(f"Erreur lors du chargement de l'index FAISS : {e}")
            return None
    else:
        st.sidebar.error(f"Index FAISS introuvable : {FAISS_INDEX_PATH}")
        return None

faiss_index = verify_faiss_index()

# Pipeline de r√©sum√© am√©lior√©
def summarize_content(content, threshold=500, max_input_length=1024):
    """R√©sum√© d'un contenu textuel avec gestion des erreurs et des limites de longueur."""
    if not content or len(content) < threshold:
        return content  # Retourne le contenu s'il est trop court

    try:
        summarizer = pipeline("summarization", model="facebook/bart-large-cnn")
        summary = summarizer(content[:max_input_length], max_length=130, min_length=30, do_sample=False)
        return summary[0]["summary_text"]
    except Exception as e:
        return f"R√©sum√© non disponible en raison d'une erreur : {e}"

# Fonction de recherche FAISS
def faiss_search(query, top_k=5):
    faiss_docs = []
    if faiss_index:
        try:
            hf_embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
            query_vector = hf_embeddings.embed_query(query)
            distances, indices = faiss_index.search(np.array([query_vector], dtype=np.float32), top_k)
            
            if os.path.exists(METADATA_FILE):
                with open(METADATA_FILE, "r", encoding="utf-8") as f:
                    metadata = json.load(f)
                
                for idx in indices[0]:
                    if 0 <= idx < len(metadata):
                        faiss_docs.append({
                            "content": metadata[idx].get("segment_content", "Contenu non disponible"),
                            "source": metadata[idx].get("file_name", "Source inconnue")
                        })
                    else:
                        st.warning(f"Index FAISS invalide : {idx}")
            else:
                st.error(f"Fichier de m√©tadonn√©es introuvable : {METADATA_FILE}")
        except Exception as e:
            st.error(f"Erreur lors de la recherche FAISS : {e}")
    return faiss_docs

# Barre lat√©rale
if os.path.exists(IMG_PATH):
    st.sidebar.image(IMG_PATH, width=200)
else:
    st.sidebar.warning("L'image de la barre lat√©rale est introuvable.")

st.sidebar.title("GeoSearch üåç")
st.sidebar.markdown("Un moteur de recherche innovant pour les sciences g√©ospatiales.")

menu = ["Accueil", "Visualisation g√©ospatiale", "Recherche avanc√©e", "Statistiques", "√Ä propos"]
choice = st.sidebar.selectbox("Navigation", menu)

if choice == "Accueil":
    st.title("Bienvenue sur GeoSearch")
    st.markdown(
        """
        **GeoSearch** est une plateforme collaborative de pointe pour les sciences g√©ospatiales.
        
        ### Fonctionnalit√©s principales :
        - üîé Recherche avanc√©e dans des sources scientifiques
        - üó∫Ô∏è Visualisation de donn√©es g√©ospatiales
        - üìä Analyse statistique des r√©sultats
        - ü§ù Collaboration entre chercheurs et professionnels
        
        Commencez votre exploration d√®s maintenant !
        """
    )
    if os.path.exists(IMG_ACCUEIL_PATH):
        st.image(IMG_ACCUEIL_PATH, caption="Analyse g√©ospatiale avanc√©e")
    else:
        st.warning("L'image de l'accueil est introuvable.")

elif choice == "Visualisation g√©ospatiale":
    st.title("Visualisation g√©ospatiale avanc√©e üåç")
    
    map_type = st.selectbox("Choisissez un type de carte :", list(MAP_PATHS.keys()))
    
    if st.button("Afficher la carte", key="show_map"):
        map_path = MAP_PATHS.get(map_type)
        if map_path and os.path.exists(map_path):
            try:
                with open(map_path, "r", encoding="utf-8") as f:
                    html_content = f.read()
                st.components.v1.html(html_content, height=600, width=None, scrolling=True)
            except Exception as e:
                st.error(f"Erreur lors du chargement de la carte : {e}")
        else:
            st.warning(f"Aucune carte trouv√©e pour : {map_type}.")

elif choice == "Recherche avanc√©e":
    st.title("Recherche avanc√©e üîé")
    col1, col2 = st.columns([3, 1])
    with col1:
        query = st.text_input("Entrez votre requ√™te :", "Changement climatique")
    with col2:
        top_k = st.slider("Nombre de r√©sultats :", 1, 10, 5)

    if st.button("Rechercher"):
        with st.spinner("Recherche en cours..."):
            results = faiss_search(query, top_k=top_k)

        if not results:
            st.warning("Aucun r√©sultat trouv√© pour la requ√™te.")
        else:
            for doc in results:
                with st.expander(f"Source : {doc.get('source', 'Inconnue')}"):
                    content = doc.get('content', '')
                    if content:
                        summary = summarize_content(content)
                        st.write(summary)
                    else:
                        st.write("Contenu non disponible")

elif choice == "Statistiques":
    st.title("Statistiques de recherche")

    data = {
        'Cat√©gorie': ['Climat', 'Urbanisme', 'Biodiversit√©', 'Oc√©anographie', 'G√©ologie'],
        'Nombre de recherches': [1200, 800, 600, 400, 300]
    }
    df = pd.DataFrame(data)

    fig = px.bar(df, x='Cat√©gorie', y='Nombre de recherches', title="R√©partition des recherches par cat√©gorie")
    st.plotly_chart(fig)

elif choice == "√Ä propos":
    st.title("√Ä propos de GeoSearch")
    st.markdown(
        """
        **GeoSearch** est une plateforme de pointe con√ßue pour les chercheurs et professionnels en g√©omatique.
        
        ### Notre mission
        Faciliter l'acc√®s et l'analyse des donn√©es g√©ospatiales pour acc√©l√©rer la recherche et l'innovation dans le domaine des sciences de la Terre.
        
        ### Technologie
        - Moteur de recherche bas√© sur l'IA
        - Int√©gration de multiples sources de donn√©es
        - Visualisation avanc√©e des donn√©es g√©ospatiales
        
        ### √âquipe
        Une √©quipe passionn√©e de data scientists, g√©ographes et d√©veloppeurs.
        """
    )

# Pied de page
st.sidebar.markdown("---")
now = datetime.datetime.now()
st.sidebar.write(f"üìÖ Date : {now.strftime('%Y-%m-%d')} | ‚è±Ô∏è Heure : {now.strftime('%H:%M')}")
st.sidebar.info("¬© 2025 GeoSearch. Tous droits r√©serv√©s.")
